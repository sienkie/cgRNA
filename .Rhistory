sapply(X, function(x){
probs <- c()
for (i in 1:length(params$mu)){
print(paste(params$mu[i], params$sig[i], params$prop[i]))
tmp <- params$prop[i]*dnorm(x, params$mu[i], sqrt(params$sig[i])) # sqrt bo odchylenie stand.
print(tmp)
probs <-c(probs,tmp)
}
probs / sum(probs)
})
}
posteriors <- E.step(X, params)
posteriors
E.step <- function(X, params){
# przypadek wielowymiarowy; params = (mu, sig, prop) -> wektory n-elementowe
sapply(X, function(x){
probs <- c()
for (i in 1:length(params$mu)){
#print(paste(params$mu[i], params$sig[i], params$prop[i]))
tmp <- params$prop[i]*dnorm(x, params$mu[i], sqrt(params$sig[i])) # sqrt bo odchylenie stand.
probs <-c(probs,tmp)
}
probs / sum(probs)
})
}
posteriors <- E.step(X, params)
posteriors
library(HMM)
library(HMM)
source('~/SAD/projekt1/pan_tadeusz.txt', encoding = 'UTF-8')
pan-tadeusz <- source('~/SAD/projekt1/pan_tadeusz.txt', encoding = 'UTF-8')
library(HMM)
pan-tadeusz <- source('~/SAD/projekt1/pan-tadeusz-new.txt', encoding = 'UTF-8')
pan-tadeusz <- paste(readLines('~/SAD/projekt1/pan-tadeusz-new.txt', encoding = 'UTF-8'))
pan-tadeusz <- paste(readLines('~/SAD/projekt1/pan.txt', encoding = 'UTF-8'))
pan-tadeusz <- paste(readLines('~/SAD/projekt1/pan.txt'))
pan-tadeusz <- paste(readLines('/home/sienkie/SAD/projekt1/pan.txt'))
pantadeusz <- paste(readLines('/home/sienkie/SAD/projekt1/pan.txt'))
pantadeusz <- paste(readLines('~/SAD/projekt1/pan.txt'))
letters <- paste(readLines('~/SAD/projekt1/letters.txt'))
letters <- paste(readLines('~/SAD/projekt1/letters.txt'))
words <- paste(readLines('~/SAD/projekt1/words'))
words <- paste(readLines('~/SAD/projekt1/words.txt'))
symbols <-c(letters) #alfabet lub sufiksy
symbols
words
letters <- paste(readLines('~/SAD/projekt1/letters.csv'))
words <- paste(readLines('~/SAD/projekt1/words.csv'))
letters <- read.csv('~/SAD/projekt1/letters.csv')
words <- read.csv('~/SAD/projekt1/words.csv')
View(letters)
symbols <-c(letters) #alfabet lub sufiksy
symbols
symbols
symbols <- as.vector(letters) #alfabet lub sufiksy
symbols
letters
letters <- read.csv('~/SAD/projekt1/letters.csv', header=FALSE,sep=",")
words <- read.csv('~/SAD/projekt1/words.csv',header=FALSE,sep=",")
letters
View(letters)
as.vector(letters)
c(letters)
letters
letters[0]
letters[0,0]
letters$V1
letters[2,]
letters[1,]
letters
letters <- read.csv('~/SAD/projekt1/letters.csv', header=FALSE,sep=",")
View(letters)
letters
letters <- read.csv('~/SAD/projekt1/letters.csv')
letters[[1]]
View(letters)
View(letters)
letters <- read.csv('~/SAD/projekt1/letters.csv')
letters
L<-letters
L<-letters()
letters <- scan("output.csv", sep=",")
letters <- scan('~/SAD/projekt1/letters.csv', sep=",")
letters <- read.csv('~/SAD/projekt1/letters.csv'header=FALSE,sep=",")
letters <- read.csv('~/SAD/projekt1/letters.csv', header=FALSE,sep=",")
letters[1]
letters[,1]
letters[,]
letters[0,]
letters[2,]
letters[,2]
letters[[1]]
letters[[1,]]
letters[[1],]
letters[[,]]
letters <- read.csv('~/SAD/projekt1/letters.csv', header=FALSE,sep=",")
View(letters)
View(letters)
words <- read.csv('~/SAD/projekt1/words.csv')
letters <- read.csv('~/SAD/projekt1/letters.csv')
letters <- read.csv('~/SAD/projekt1/letters.csv')
View(letters)
View(letters)
letters <- read.csv('~/SAD/projekt1/letters.csv', header=FALSE,sep=",")
letters[[1]]
symbols <- letters[[1]] #alfabet lub sufiksy
words <- read.csv('~/SAD/projekt1/words.csv', header=FALSE,sep=",")
em <- c(1:12)
em.matrix <- matrix(em, nrow=length(states), ncol=length(symbols), byrow=TRUE)
states<-c('uczciwa', 'nieuczciwa')
symbols<-rzuty
em <- c(1:12)
em.matrix <- matrix(em, nrow=length(states), ncol=length(symbols), byrow=TRUE)
em
em.matrix
for (i in 1:length(states_letters)){
print(i)
}
states_letters<-c('A', 'B')
for (i in 1:length(states_letters)){
print(i)
}
print(i,j)
print(i j)
print(paste(i j)
}
}
em.matrix <- matrix(em, nrow=length(states), ncol=length(symbols), byrow=TRUE)
print(paste(i+j)
}
}
em.matrix <- matrix(em, nrow=length(states), ncol=length(symbols), byrow=TRUE)
print(paste(i,j)
}
}
em.matrix <- matrix(em, nrow=length(states), ncol=length(symbols), byrow=TRUE)
for (i in 1:length(states_letters)){
for (j in 1:length(symbols_letters)){
}
}
for (i in 1:length(states_letters)){
for (j in 1:length(symbols_letters)){
print(i)
}
}
symbols_letters <- letters[[1]] #alfabet
for (i in 1:length(states_letters)){
for (j in 1:length(symbols_letters)){
print(i)
}
}
for (i in 1:length(states_letters)){
for (j in 1:length(symbols_letters)){
print(i)
print(j)
}
}
?rnom
??rnom
?rnorm
rnomrm(32)
rnorm(32)
13/2
length(symbols_letters)
rnorm(length(symbols_letters)/2-1, mean = 1/length(symbols_letters))
vals <- rnorm(length(symbols_letters)-1, mean = 1/length(symbols_letters))
sum(vals)
vals <- rnorm(length(symbols_letters)-1, mean = 1/length(symbols_letters))
vals
sum(vals)
vals <- rnorm(length(symbols_letters)-1, mean = 1/length(symbols_letters), sd= 0.0001)
sum(vals)
vals <- rnorm(length(symbols_letters)-1, mean = 1/length(symbols_letters), sd= 0.00001)
sum(vals)
tmp = c()
length(c)
tmp[length(c)] = 2
tmp
tmp[length(c)] = 3
tmp
tmp[length(c)+ 1] = 3
tmp
tmp[length(c)+ 1] = 5
tmp
tmp[length(tmp)+ 1] = 5
tmp[length(tmp)+ 1] = 5
tmp[length(tmp)+ 1] = 5
tmp[length(tmp)+ 1] = 5
tmp
tmp[length(tmp)+ 1] = 9
tmp
tmp = c()
tmp
tmp[length(tmp)+ 1] = 9
tmp
tmp[length(tmp)+ 1] = 9
tmp
tmp[length(tmp)+ 1] = c(5,7,8)
tmp = tmp + c(5,7,8)
tmp
tmp <- c(tmp, c(4,5,6))
tmp
tmp <- c(tmp, c(4,5,6))
tmp
for (i in 1:length(states_letters)){
vals <- rnorm(length(symbols_letters)-1, mean = 1/length(symbols_letters), sd= 0.00001)
em <- c(em, vals)
em[length(em)+1] = (1- sum(vals))
}
em
em <- c()
for (i in 1:length(states_letters)){
vals <- rnorm(length(symbols_letters)-1, mean = 1/length(symbols_letters), sd= 0.00001)
em <- c(em, vals)
em[length(em)+1] = (1- sum(vals))
}
em.matrix <- matrix(em, nrow=length(states), ncol=length(symbols), byrow=TRUE)
em.matrix <- matrix(em, nrow=length(states_letters), ncol=length(symbols_letters), byrow=TRUE)
View(em.matrix)
transProbs = c()
for (i in 1:length(states_letters)){
vals <- rnorm(length(states_letters)-1, mean = 1/length(states_letters), sd= 0.00001)
transProbs <- c(transProbs, vals)
transProbs[length(transProbs)+1] = (1- sum(vals))
}
transProbs.matrix <- matrix(transProbs, nrow=length(states_letters), ncol=length(states_letters), byrow=TRUE)
View(transProbs.matrix)
hmm <- initHMM(states, symbols, transProbs = NULL, emissionProbs = em.matrix)
hmm_letters <- initHMM(states_letters, symbols_letters, transProbs.matrix, emissionProbs = em.matrix)
symbols_letters
length(symbols_letters)
em.matrix
transProbs.matrix
hmm <- initHMM(states, symbols, transProbs = NULL, emissionProbs = em.matrix)
hmm_letters <- initHMM(states_letters, symbols_letters, transProbs.matrix, emissionProbs = em.matrix)
?initHMM
hmm_letters <- initHMM(states_letters, symbols_letters, startProbs=NULL, transProbs.matrix, emissionProbs = em.matrix)
pantadeusz <- paste(readLines('~/SAD/projekt1/pan.txt'))
letters <- read.csv('~/SAD/projekt1/letters.csv', header=FALSE,sep=",")
symbols_letters <- letters[[1]] #alfabet
pantadeusz <- paste(readLines('~/SAD/projekt1/pan.txt'))
letters <- read.csv('~/SAD/projekt1/letters.csv', header=FALSE,sep=",")
words <- read.csv('~/SAD/projekt1/words.csv', header=FALSE,sep=",")
states_letters<-c('A', 'B')
symbols_letters <- letters[[1]] #alfabet
symbols_letters
View(letters)
states_letters<-c('A', 'B')
symbols_letters <- letters[[1]] #alfabet
em <- c()
for (i in 1:length(states_letters)){
vals <- rnorm(length(symbols_letters)-1, mean = 1/length(symbols_letters), sd= 0.00001)
em <- c(em, vals)
em[length(em)+1] = (1- sum(vals))
}
em.matrix <- matrix(em, nrow=length(states_letters), ncol=length(symbols_letters), byrow=TRUE)
transProbs = c()
for (i in 1:length(states_letters)){
vals <- rnorm(length(states_letters)-1, mean = 1/length(states_letters), sd= 0.00001)
transProbs <- c(transProbs, vals)
transProbs[length(transProbs)+1] = (1- sum(vals))
}
transProbs.matrix <- matrix(transProbs, nrow=length(states_letters), ncol=length(states_letters), byrow=TRUE)
hmm_letters <- initHMM(states_letters, symbols_letters, startProbs=NULL, transProbs.matrix, emissionProbs = em.matrix)
strsplit(pantadeusz,"")
pantadeusz
pantadeusz <- strsplit(pantadeusz,"")
pantadeusz <- paste(readLines('~/SAD/projekt1/pan.txt'))
pantadeusz_letters <- strsplit(pantadeusz,"")
post.prob <- posterior( hmm, pantadeusz_letters)
post.prob <- posterior( hmm_letters, pantadeusz_letters)
bw <- baumWelch(hmm_letters, pantadeusz_letters, maxIterations = 5) #100
pantadeusz_letters <- as.vector(strsplit(pantadeusz,""))
bw <- baumWelch(hmm_letters, pantadeusz_letters, maxIterations = 5) #100
pantadeusz_letters <- as.vector(strsplit(pantadeusz,""))
pantadeusz_letters <- as.vector(unlist(strsplit(pantadeusz,"")))
bw <- baumWelch(hmm_letters, pantadeusz_letters, maxIterations = 5) #100
print(pantadeusz)
pantadeusz <- paste(readLines('~/SAD/projekt1/pan.txt'))
print(pantadeusz)
pantadeusz <- paste(readLines('~/SAD/projekt1/pan.txt'))
pantadeusz <- paste(readLines('~/SAD/projekt1/pan.txt'))
print(pantadeusz)
pantadeusz <- paste(readLines('~/SAD/projekt1/pan.txt'))
letters <- read.csv('~/SAD/projekt1/letters.csv', header=FALSE,sep=",")
words <- read.csv('~/SAD/projekt1/words.csv', header=FALSE,sep=",")
states_letters<-c('A', 'B')
symbols_letters <- letters[[1]] #alfabet
em <- c()
for (i in 1:length(states_letters)){
vals <- rnorm(length(symbols_letters)-1, mean = 1/length(symbols_letters), sd= 0.00001)
em <- c(em, vals)
em[length(em)+1] = (1- sum(vals))
}
em.matrix <- matrix(em, nrow=length(states_letters), ncol=length(symbols_letters), byrow=TRUE)
transProbs = c()
for (i in 1:length(states_letters)){
vals <- rnorm(length(states_letters)-1, mean = 1/length(states_letters), sd= 0.00001)
transProbs <- c(transProbs, vals)
transProbs[length(transProbs)+1] = (1- sum(vals))
}
transProbs.matrix <- matrix(transProbs, nrow=length(states_letters), ncol=length(states_letters), byrow=TRUE)
hmm_letters <- initHMM(states_letters, symbols_letters, startProbs=NULL, transProbs.matrix, emissionProbs = em.matrix)
pantadeusz <- c(gsub("coś", "", pantadeusz))
pantadeusz <- paste(readLines('~/SAD/projekt1/pan.txt'))
letters <- read.csv('~/SAD/projekt1/letters.csv', header=FALSE,sep=",")
words <- read.csv('~/SAD/projekt1/words.csv', header=FALSE,sep=",")
states_letters<-c('A', 'B')
symbols_letters <- letters[[1]] #alfabet
em <- c()
for (i in 1:length(states_letters)){
vals <- rnorm(length(symbols_letters)-1, mean = 1/length(symbols_letters), sd= 0.00001)
em <- c(em, vals)
em[length(em)+1] = (1- sum(vals))
}
em.matrix <- matrix(em, nrow=length(states_letters), ncol=length(symbols_letters), byrow=TRUE)
transProbs = c()
for (i in 1:length(states_letters)){
vals <- rnorm(length(states_letters)-1, mean = 1/length(states_letters), sd= 0.00001)
transProbs <- c(transProbs, vals)
transProbs[length(transProbs)+1] = (1- sum(vals))
}
transProbs.matrix <- matrix(transProbs, nrow=length(states_letters), ncol=length(states_letters), byrow=TRUE)
hmm_letters <- initHMM(states_letters, symbols_letters, startProbs=NULL, transProbs.matrix, emissionProbs = em.matrix)
pantadeusz_letters <- as.vector(unlist(strsplit(pantadeusz,"")))
bw <- baumWelch(hmm_letters, pantadeusz_letters, maxIterations = 5) #100
bw
plot(posterior(bw$hmm, pantadeusz_letters)[1,])
pantadeusz_suf <- paste(readLines('~/SAD/projekt1/pan_suf.txt'))
pantadeusz_suf <- as.vector(unlist(strsplit(pantadeusz_suf,"")))
pantadeusz_suf
pantadeusz_suf <- paste(readLines('~/SAD/projekt1/pan_suf.txt'))
pantadeusz_suf
pantadeusz_suf <- as.vector(unlist(strsplit(pantadeusz_suf," ")))
pantadeusz_suf
bw
q
pantadeusz_suf
xyplot(bw$hmm$emissionProbs[1,] ~ c(1:27), scales=list(x=list(at=1:27, labels=colnames (bw$hmm$emissionProbs))), type="h", xlab = 'litery', ylab = 'stan A')
library("lattice", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
library("lattice")
xyplot(bw$hmm$emissionProbs[1,] ~ c(1:27), scales=list(x=list(at=1:27, labels=colnames (bw$hmm$emissionProbs))), type="h", xlab = 'litery', ylab = 'stan A')
xyplot(bw$hmm$emissionProbs[2,] ~ c(1:27), scales=list(x=list(at=1:27, labels=colnames (bw$hmm$emissionProbs))), type="h", xlab = 'litery', ylab = 'stan B')
pantadeusz_suf <- as.vector(unlist(strsplit(pantadeusz_suf," ")))
pantadeusz_suf
bw_letters_100 <- baumWelch(hmm_letters, pantadeusz_letters, maxIterations = 5) #100
xyplot(bw_letters$hmm$emissionProbs[1,] ~ c(1:27), scales=list(x=list(at=1:27, labels=colnames (bw$hmm$emissionProbs))), type="h", xlab = 'litery', ylab = 'stan A')
xyplot(bw_letters_100$hmm$emissionProbs[1,] ~ c(1:27), scales=list(x=list(at=1:27, labels=colnames (bw$hmm$emissionProbs))), type="h", xlab = 'litery', ylab = 'stan A')
xyplot(bw_letters_100$hmm$emissionProbs[2,] ~ c(1:27), scales=list(x=list(at=1:27, labels=colnames (bw$hmm$emissionProbs))), type="h", xlab = 'litery', ylab = 'stan B')
bw_letters_100 <- baumWelch(hmm_letters, pantadeusz_letters, maxIterations = 100)
bw_letters_50 <- baumWelch(hmm_letters, pantadeusz_letters, maxIterations = 50)
xyplot(bw_letters_50$hmm$emissionProbs[1,] ~ c(1:27), scales=list(x=list(at=1:27, labels=colnames (bw$hmm$emissionProbs))), type="h", xlab = 'litery', ylab = 'stan A')
xyplot(bw_letters_50$hmm$emissionProbs[2,] ~ c(1:27), scales=list(x=list(at=1:27, labels=colnames (bw$hmm$emissionProbs))), type="h", xlab = 'litery', ylab = 'stan B')
xyplot(bw_letters_50$hmm$emissionProbs[1,] ~ c(1:27), scales=list(x=list(at=1:27, labels=colnames (bw$hmm$emissionProbs))), type="h", xlab = 'litery', ylab = 'stan pierwszy')
xyplot(bw_letters_50$hmm$emissionProbs[2,] ~ c(1:27), scales=list(x=list(at=1:27, labels=colnames (bw$hmm$emissionProbs))), type="h", xlab = 'litery', ylab = 'stan drugi')
xyplot(bw_letters_50$hmm$emissionProbs[1,] ~ c(1:27), scales=list(x=list(at=1:27, labels=colnames (bw_letters_50$hmm$emissionProbs))), type="h", xlab = 'litery', ylab = 'stan pierwszy')
xyplot(bw_letters_50$hmm$emissionProbs[2,] ~ c(1:27), scales=list(x=list(at=1:27, labels=colnames (bw_letters_50$hmm$emissionProbs))), type="h", xlab = 'litery', ylab = 'stan drugi')
xyplot(bw_letters_50$hmm$emissionProbs[1,] ~ c(1:27), scales=list(x=list(at=1:27, labels=colnames (bw_letters_50$hmm$emissionProbs))), type="h", xlab = 'litery', ylab = 'stan pierwszy')
xyplot(bw_letters_50$hmm$emissionProbs[2,] ~ c(1:27), scales=list(x=list(at=1:27, labels=colnames (bw_letters_50$hmm$emissionProbs))), type="h", xlab = 'litery', ylab = 'stan drugi')
xyplot(bw_letters_50$hmm$emissionProbs[1,] ~ c(1:27), scales=list(x=list(at=1:27, labels=colnames (bw_letters_50$hmm$emissionProbs[1,]))), type="h", xlab = 'litery', ylab = 'stan pierwszy')
xyplot(bw_letters_50$hmm$emissionProbs[1,] ~ c(1:27), scales=list(x=list(at=1:27, labels=colnames (bw_letters_50$hmm$emissionProbs))), type="h", xlab = 'litery', ylab = 'stan pierwszy')
bw_letters_50$hmm$emissionProbs[2,]
bw_letters_50$hmm$emissionProbs[1,]
bw_letters_50$hmm$emissionProbs
pantadeusz <- paste(readLines('~/SAD/projekt1/pan.txt'))
pantadeusz_suf <- paste(readLines('~/SAD/projekt1/pan_klastry.txt'))
letters <- read.csv('~/SAD/projekt1/letters.csv', header=FALSE,sep=",")
words <- read.csv('~/SAD/projekt1/words.csv', header=FALSE,sep=",")
clusters <- c('aaa','aab','aba','baa','bbb','bab','bba','abb','aa','bb','ab','ba','a','b')
states_letters<-c('A', 'B')
symbols_letters <- letters[[1]] #alfabet
em <- c()
for (i in 1:length(states_letters)){
vals <- rnorm(length(symbols_letters)-1, mean = 1/length(symbols_letters), sd= 0.004)
em <- c(em, vals)
em[length(em)+1] = (1- sum(vals))
}
em.matrix <- matrix(em, nrow=length(states_letters), ncol=length(symbols_letters), byrow=TRUE)
transProbs = c()
for (i in 1:length(states_letters)){
vals <- rnorm(length(states_letters)-1, mean = 1/length(states_letters), sd= 0.002)
transProbs <- c(transProbs, vals)
transProbs[length(transProbs)+1] = (1- sum(vals))
}
transProbs
transProbs.matrix
em.matrix
em <- c()
em <- c()
for (i in 1:length(states_letters)){
vals <- rnorm(length(symbols_letters)-1, mean = 1/length(symbols_letters), sd= 0.005)
em <- c(em, vals)
em[length(em)+1] = (1- sum(vals))
}
em.matrix <- matrix(em, nrow=length(states_letters), ncol=length(symbols_letters), byrow=TRUE)
em.matrix
transProbs = c()
for (i in 1:length(states_letters)){
vals <- rnorm(length(states_letters)-1, mean = 1/length(states_letters), sd= 0.002)
transProbs <- c(transProbs, vals)
transProbs[length(transProbs)+1] = (1- sum(vals))
}
transProbs.matrix <- matrix(transProbs, nrow=length(states_letters), ncol=length(states_letters), byrow=TRUE)
hmm_letters <- initHMM(states_letters, symbols_letters, startProbs=NULL, transProbs.matrix, emissionProbs = em.matrix)
pantadeusz_letters <- as.vector(unlist(strsplit(pantadeusz,"")))
pantadeusz_letters
bw_letters <- baumWelch(hmm_letters, pantadeusz_letters, maxIterations = 50)
xyplot(bw_letters$hmm$emissionProbs[1,] ~ c(1:27), scales=list(x=list(at=1:27, labels=colnames (bw_letters$hmm$emissionProbs))), type="h", xlab = 'litery', ylab = 'stan A')
xyplot(bw_letters$hmm$emissionProbs[2,] ~ c(1:27), scales=list(x=list(at=1:27, labels=colnames (bw_letters$hmm$emissionProbs))), type="h", xlab = 'litery', ylab = 'stan B')
bw_letters <- baumWelch(hmm_letters, pantadeusz_letters)
centaury <- paste(readLines('~/SAD/projekt1/centaury.txt'))
centaury_letters <- as.vector(unlist(strsplit(centaury,"")))
centaury_suf <- paste(readLines('~/SAD/projekt1/centaury_klastry.txt'))
centaury_suf <- as.vector(unlist(strsplit(centaury_suf," ")))
centaury_suf
centaury_letters
frost <- paste(readLines('~/SAD/projekt1/frost.txt'))
frost_letters <- as.vector(unlist(strsplit(frost,"")))
frost_suf <- paste(readLines('~/SAD/projekt1/frost_klastry.txt'))
frost_suf <- as.vector(unlist(strsplit(frost_suf," ")))
frost_suf
frost_letters
kamien <- paste(readLines('~/SAD/projekt1/kamien.txt'))
kamien_letters <- as.vector(unlist(strsplit(kamien,"")))
kamien_suf <- paste(readLines('~/SAD/projekt1/kamien_klastry.txt'))
kamien_suf <- as.vector(unlist(strsplit(kamien_suf," ")))
kamien_suf
kamien_letters
centaury_post <- posterior(hmm_letters, centaury_letters)
centaury_post
plot(apply(post.prob[1:length(states_letters),],2,max))
bw_letters$hmm$emissionProbs[1,]
centaury_post
bw_letters$hmm$emissionProbs
centaury_post
centaury_letters
bw_letters$hmm$centaury_letters[1,]
centaury_post[1,]
xyplot(centaury_post[1,] ~ c(1:27), scales=list(x=list(at=1:27, labels=colnames (bw$hmm$emissionProbs))), type="h", xlab = 'centaury letters', ylab = 'stan A posterior')
xyplot(centaury_post[1,] ~ c(1:402), scales=list(x=list(at=1:402, labels=colnames (centaury_letters))), type="h", xlab = 'centaury letters', ylab = 'stan A posterior')
plot( centaury_post[2,] )
plot( centaury_post[1,] )
plot(apply(post.prob[1:length(states_letters),],2,max))
plot(apply(centaury_post[1:length(states_letters),],2,max))
plot(apply(centaury_post[1:length(states_letters),],2,max, type='l'))
plot(apply(centaury_post[1:length(states_letters),],2,max))
plot(centaury_post$state, type='s')
matplot(centaury_post[1,], type='l')
matplot(centaury_post[2,], type='l')
plot(apply(centaury_post[1:length(states_letters),],2,max))
xyplot(apply(centaury_post[1:length(states_letters),],2,max))
xyplot(centaury_post[1:length(states_letters),])
xyplot(centaury_post[1:length(states_letters),]~c(1:409))
xyplot(centaury_post[1,] ~ c(1:402), scales=list(x=list(at=1:402, type="h")
frost <- paste(readLines('~/SAD/projekt1/frost.txt'))
frost_letters <- as.vector(unlist(strsplit(frost,"")))
frost_suf <- paste(readLines('~/SAD/projekt1/frost_klastry.txt'))
frost_suf <- as.vector(unlist(strsplit(frost_suf," ")))
kamien <- paste(readLines('~/SAD/projekt1/kamien.txt'))
kamien_letters <- as.vector(unlist(strsplit(kamien,"")))
kamien_suf <- paste(readLines('~/SAD/projekt1/kamien_klastry.txt'))
kamien_suf <- as.vector(unlist(strsplit(kamien_suf," ")))
xyplot(centaury_post[1,] ~ c(1:402), scales=list(x=list(at=1:402, type="h"))
frost <- paste(readLines('~/SAD/projekt1/frost.txt'))
frost_letters <- as.vector(unlist(strsplit(frost,"")))
frost_suf <- paste(readLines('~/SAD/projekt1/frost_klastry.txt'))
frost_suf <- as.vector(unlist(strsplit(frost_suf," ")))
kamien <- paste(readLines('~/SAD/projekt1/kamien.txt'))
kamien_letters <- as.vector(unlist(strsplit(kamien,"")))
kamien_suf <- paste(readLines('~/SAD/projekt1/kamien_klastry.txt'))
kamien_suf <- as.vector(unlist(strsplit(kamien_suf," ")))
xyplot(centaury_post[1,] ~ c(1:402), scales=list(x=list(at=1:402, type="h")))
plot(apply(centaury_post[1:length(states_letters),],2,max))
xyplot(centaury_post[1:length(states_letters),]~c(1:409))
xyplot(centaury_post[1,] ~ c(1:402), scales=list(x=list(at=1:402, type="h")))
plot(apply(centaury_post[1:length(states_letters),],2,max))
xyplot(centaury_post[1:length(states_letters),]~c(1:409))
xyplot(centaury_post[1:length(states_letters),]~c(1:409),xlab = 'litery', ylab = '"Centaury" posterior')
xyplot(centaury_post[1:length(states_letters),]~c(1:409),xlab = 'kolejne litery', ylab = '"Centaury" posterior')
xyplot(centaury_post[1:length(states_letters),]~c(1:409),xlab = 'kolejne obserwacje', ylab = '"Centaury" posterior')
centaury_post <- posterior(hmm_letters, centaury_letters)
xyplot(centaury_post[1:length(states_letters),]~c(1:length(centaury_letters)),xlab = 'kolejne obserwacje', ylab = '"Centaury" posterior')
frost_post <- posterior(hmm_letters, frost_letters)
xyplot(frost_post[1:length(states_letters),]~c(1:length(frost_letters)),xlab = 'kolejne obserwacje', ylab = '"Fire and ice" posterior')
kamien_post <- posterior(hmm_letters, kamien_letters)
xyplot(kamien_post[1:length(states_letters),]~c(1:length(kamien_letters)),xlab = 'kolejne obserwacje', ylab = '"Rozmowa z kamieniem" posterior')
source("https://bioconductor.org/biocLite.R")
biocLite("biomaRt")
library("biomaRt")
biocLite("biomaRt")
source("https://bioconductor.org/biocLite.R")
biocLite("biomaRt")
library("biomaRt")
setwd("~/PycharmProjects/cgRNA")
library(ggplot2)
file <- read.csv(file = "Kyu_dists.csv",header = TRUE, sep=",")
file2 <- read.csv(file = "Ding_dists.csv",header = TRUE, sep=",")
pp <- c(file$distPP,file2$distPP)
cc <- c(file$distCC,file2$distCC)
ccpp <- c(file$distPP,file2$distPP,file$distCC,file2$distCC)
m4<-mean(ccpp)
std4<-sqrt(var(ccpp))
hist(ccpp, density=20, breaks=20, prob=TRUE, xlab="distance", ylab="Probability", ylim=c(0, 2),
main="C-C/P-P distance in Ding&Kyu data set")
hist(ccpp, density=20, breaks=20, prob=TRUE, xlab="distance", ylab="Probability", ylim=c(0, 1),
main="C-C/P-P distance in Ding&Kyu data set")
curve(dnorm(x, mean=m4, sd=std4),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
m4
std4
m4+2*std4
m4-2*std4
